const schedule = require('node-schedule');
const { fetchBoards, fetchPinsFromBoard } = require('../services/pinterest.js');
const { sendToTelegram } = require('../services/telegram.js');
const { findHighestResolutionImage } = require('../services/utils');
const { addPinToDb, writeAllPinsFromDb } = require('../services/db.js');
const config = require('../config');

async function processPinsFromSpecificBoard() {
	if (!config.pinterest.boardId) {
		console.error('‚ùå –û—à–∏–±–∫–∞: Board ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');
		return;
	}

	try {
		console.log(`üìå –ü–æ–ª—É—á–∞–µ–º –ø–∏–Ω—ã —Å –¥–æ—Å–∫–∏: ${config.pinterest.boardId}`);
		const allPinsFromDB = await writeAllPinsFromDb(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏–Ω–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ

		let bookmark = null;
		let morePinsAvailable = true;
		let iterationCount = 0;
		const maxIterations = 10; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

		while (morePinsAvailable && iterationCount < maxIterations) {
			iterationCount++;

			const { items: pins, bookmark: newBookmark } = await fetchPinsFromBoard(
				config.pinterest.boardId,
				bookmark
			);

			if (!pins.length) {
				console.log('‚úÖ –í—Å–µ –ø–∏–Ω—ã –Ω–∞ –¥–æ—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
				break;
			}

			for (const pin of pins) {
				if (allPinsFromDB.some((pinInDb) => pinInDb.id === pin.id)) {
					continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∏–Ω
				}

				const imageUrl = findHighestResolutionImage(pin.media?.images || {});
				if (!imageUrl) continue;

				try {
					const success = await sendToTelegram(imageUrl, pin.title || '');
					if (success) {
						await addPinToDb(pin.id);
						return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
					}
				} catch (err) {
					console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–∞ ${pin.id}:`, err);
				}
			}

			bookmark = newBookmark;
			morePinsAvailable = !!bookmark;
		}
	} catch (err) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–Ω–æ–≤:', err);
	}
}

async function processPinsFromAllBoards() {
	try {
		const boards = await fetchBoards();
		if (!boards.length) {
			console.log('‚ùå –û—à–∏–±–∫–∞: –î–æ—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
			return;
		}

		const allPinsFromDB = await writeAllPinsFromDb(); // –û–¥–∏–Ω —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏–Ω–æ–≤

		for (const board of boards) {
			console.log(`üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å–∫—É: ${board.name} (${board.id})`);

			let bookmark = null;
			let morePinsAvailable = true;
			let iterationCount = 0;
			const maxIterations = 10; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

			while (morePinsAvailable && iterationCount < maxIterations) {
				iterationCount++;

				const { items: pins, bookmark: newBookmark } = await fetchPinsFromBoard(
					board.id,
					bookmark
				);

				if (!pins.length) {
					console.log(`‚úÖ –í—Å–µ –ø–∏–Ω—ã –Ω–∞ –¥–æ—Å–∫–µ ${board.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
					break;
				}

				for (const pin of pins) {
					if (allPinsFromDB.some((pinInDb) => pinInDb.id === pin.id)) {
						continue;
					}

					const imageUrl = findHighestResolutionImage(pin.media?.images || {});
					if (!imageUrl) continue;

					try {
						const success = await sendToTelegram(imageUrl, pin.title || '');
						if (success) {
							await addPinToDb(pin.id);
							return;
						}
					} catch (err) {
						console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–∞ ${pin.id}:`, err);
					}
				}

				bookmark = newBookmark;
				morePinsAvailable = !!bookmark;
			}
		}
	} catch (err) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–Ω–æ–≤ —Å –¥–æ—Å–æ–∫:', err);
	}
}

function startSchedule(specificBoardMode) {
	schedule.scheduleJob(config.scheduleInterval, async () => {
		console.log('‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É...');
		if (specificBoardMode) {
			console.log('üéØ –†–µ–∂–∏–º –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏.');
			await processPinsFromSpecificBoard();
		} else {
			console.log('üîÑ –†–µ–∂–∏–º –≤—Å–µ—Ö –¥–æ—Å–æ–∫.');
			await processPinsFromAllBoards();
		}
	});
}

module.exports = {
	processPinsFromSpecificBoard,
	processPinsFromAllBoards,
	startSchedule,
};
